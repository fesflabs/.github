name: CI Gen√©rico com Cache Local (Backend/Frontend)

on:
  workflow_call:
    inputs:
      project_type:
        description: "Tipo de projeto: 'backend' ou 'frontend'"
        required: true
        type: string
      runner:
        description: "Runner onde o job vai rodar"
        required: false
        type: string
        default: '["self-hosted"]'
      service_name:
        description: "Nome do servi√ßo principal a ser constru√≠do"
        required: true
        type: string
    secrets:
      ENV_FILE_CONTENT:
        description: 'Conte√∫do completo do .env com todas as vari√°veis.'
        required: false

jobs:
  build-test:
    name: Build/Test com Cache
    runs-on: ${{ fromJSON(inputs.runner) }}
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # --- ETAPAS NO RUNNER (PARA LINT/TEST) ---
      - name: Configura√ß√£o Node.js (frontend)
        if: ${{ inputs.project_type == 'frontend' }}
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Instala√ß√£o do pnpm (frontend)
        if: ${{ inputs.project_type == 'frontend' }}
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Obter o diret√≥rio de cache do pnpm
        if: ${{ inputs.project_type == 'frontend' }}
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Configurar cache de depend√™ncias do Runner (para lint/test)
        if: ${{ inputs.project_type == 'frontend' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-v1-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-v1-

      - name: Instalar depend√™ncias no Runner (para lint/test)
        if: ${{ inputs.project_type == 'frontend' }}
        run: pnpm install --frozen-lockfile
      
      - name: Criar .env para build com a URL da API
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" | grep "NEXT_PUBLIC_API_URL=" > .env

      # ‚ñº‚ñº‚ñº PASSO DE DEBUG TEMPOR√ÅRIO ‚ñº‚ñº‚ñº
      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è [DEBUG] VERIFICAR CONTE√öDO DO .ENV DE BUILD
        run: |
          echo "=================================================="
          echo "Conte√∫do do arquivo .env que ser√° usado no build:"
          cat .env
          echo "=================================================="

      - name: Build Docker (com Cache de Pnpm via BuildKit)
        env:
          DOCKER_BUILDKIT: 1
        run: docker compose build --pull ${{ inputs.service_name }}

      - name: Limpar imagens Docker n√£o utilizadas
        if: always()
        run: docker image prune -f

name: CI Genérico com Cache Local (Backend/Frontend)

on:
  workflow_call:
    inputs:
      project_type:
        description: "Tipo de projeto: 'backend' ou 'frontend'"
        required: true
        type: string
      runner:
        description: "Runner onde o job vai rodar"
        required: false
        type: string
        default: '["self-hosted"]'
      # Nome do serviço principal da aplicação no docker-compose.yml
      service_name:
        description: "Nome do serviço principal a ser construído"
        required: true
        type: string

jobs:
  build-test:
    name: Build/Test com Cache
    runs-on: ${{ fromJSON(inputs.runner) }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # --- ETAPAS FRONTEND ---
      - name: Configuração Node.js (frontend)
        if: ${{ inputs.project_type == 'frontend' }}
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Instalação do pnpm (frontend)
        if: ${{ inputs.project_type == 'frontend' }}
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Obter o diretório de cache do pnpm
        if: ${{ inputs.project_type == 'frontend' }}
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Configurar cache de dependências do pnpm (automático)
        if: ${{ inputs.project_type == 'frontend' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-v1-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-v1-

      - name: Instalar dependências (frontend)
        if: ${{ inputs.project_type == 'frontend' }}
        run: pnpm install --frozen-lockfile

      # --- ETAPAS COMUNS (BUILD) ---
      - name: Criar .env para build
        run: |
          if [ -f .env.example ]; then
            cp .env.example .env
          else
            echo "DUMMY_VAR=DUMMY_VALUE" > .env
          fi

      - name: Build Docker da Aplicação usando cache local
        run: docker compose build --pull ${{ inputs.service_name }}

      # --- CLEANUP ---
      - name: Limpar imagens Docker não utilizadas
        if: always()
        run: docker image prune -f
